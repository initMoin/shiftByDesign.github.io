---
---

/* -------------------------------------------------------
   main.scss  —  shift byDesign
   Organized, conflict-free stylesheet
------------------------------------------------------- */

/* ========== CSS Custom Properties ========== */
:root {
  /* Base colors */
  --bg: #ffffff;
  --fg: #111111;
  --muted: #6b7280;

  /* Brand accents */
  --brand-orange: #FF4E00;
  --brand-blue:   #00B2FF;

  /* Social “pill” colors */
  --github:   #000000;
  --medium:   #000000;
  --five00px: #000000;   /* 500px */
  --bluesky:  #0285FF;
  --mastodon: #6364FF;
  --email:    #0A84FF;

  /* Motion */
  --anim-dur: 280ms;
  --anim-ease: cubic-bezier(.25,.1,.25,1);

  /* Social sizing (mobile/base) */
  --social-icon-size: 37px;
  --social-pill-size: 49px;
  --social-gap: 13px;
  --social-bottom-pad: clamp(20px, 4vh, 48px);
}

/* ========== Base / Reset ========== */
*, *::before, *::after { box-sizing: border-box; }
html, body { height: 100%; }
body {
  margin: 0;
  color: var(--fg);
  background: var(--bg);
  font-family: -apple-system, BlinkMacSystemFont, "Helvetica Neue", Arial, system-ui, sans-serif;
}

/* ========== Layout: brand centered, socials pinned ========== */
.site {
  min-height: 100dvh;
  display: flex;
  flex-direction: column;
  justify-content: space-between;   /* middle + bottom */
}

.brand-wrap {
  flex: 1;
  display: flex;
  align-items: center;               /* vertical center */
  justify-content: center;           /* horizontal center */
  padding-inline: 24px;
}

/* Shrink-wrap the brand block and hard-center it */
.brand {
  display: inline-grid;              /* intrinsic width of contents */
  margin-inline: auto;
  max-inline-size: 92vw;             /* prevent overflow on small viewports */
}

/* Stack: logo, name, tagline */
.brand-stack {
  display: grid;
  justify-items: center;
  row-gap: clamp(12px, 2vw, 24px);
}

/* ========== Brand assets (cross-fade) ========== */
.swap-img { position: relative; display: inline-block; }
.swap-img .layer { display: block; inline-size: 100%; height: auto; }
.swap-img .layer.color {
  position: absolute; inset: 0; opacity: 0; transition: opacity 220ms ease;
}
/* Fade color layers in when the whole brand is hovered/focused */
.brand:hover .swap-img .layer.color,
.brand:focus-within .swap-img .layer.color { opacity: 1; }

/* Smooth default transitions for elements inside the brand */
.brand * {
  transition:
    opacity var(--anim-dur) var(--anim-ease),
    transform var(--anim-dur) var(--anim-ease),
    filter var(--anim-dur) var(--anim-ease),
    color var(--anim-dur) var(--anim-ease),
    background-color var(--anim-dur) var(--anim-ease);
}

/* Tuned sizes (mobile-first; desktop bump below) */
.brand-logo { width: clamp(130px, 16vw, 220px); opacity: .85; }
.brand-name { width: clamp(350px, 52vw, 780px); }
.tagline    { font-size: clamp(17px, 1.8vw, 18px); line-height: 1.35; }

/* iPhone-ish safety: a touch more breathing room at tiny widths */
@media (max-width: 400px) {
  .brand { max-inline-size: 94vw; }
  .brand-name { width: 90vw; }
  .brand-logo { width: 30vw; }
}

/* Desktop emphasis: name bigger, logo slightly smaller */
@media (min-width: 1100px) {
  .brand-logo { width: clamp(140px, 12vw, 200px); }
  .brand-name { width: clamp(640px, 60vw, 1040px); }  /* bigger name */
}

/* ========== Tagline styling & hover colorization ========== */
.tagline {
  margin: 0;
  text-align: center;
  letter-spacing: 0.01em;
  color: #7a7a7a;                 /* neutral base for non-span text */
  transition: color 260ms ease;
}
.tagline .shift,
.tagline .design {
  font-weight: 700;
  color: inherit;                 /* inherit neutral by default */
  transition: color 260ms ease;
}
.tagline .double-slash { color: #9aa0a6; }

/* Whole-brand hover: non-span text → black; key words → brand colors */
.brand:hover .tagline,
.brand:focus-within .tagline { color: #000; }
.brand:hover .tagline .shift,
.brand:focus-within .tagline .shift { color: var(--brand-orange); }
.brand:hover .tagline .design,
.brand:focus-within .tagline .design { color: var(--brand-blue); }

/* ========== Cursor-style “//” animation in tagline ========== */
@keyframes cursor-blink { 0%,40%{opacity:.18} 50%,90%{opacity:1} 100%{opacity:.18} }

.tagline .double-slash {
  position: relative;
  display: inline-block;
  color: transparent;             /* hide literal // */
  letter-spacing: -0.18em;        /* pull slashes closer together */
  font: inherit;
}
.tagline .double-slash::before,
.tagline .double-slash::after {
  content: "/";
  position: relative;
  display: inline-block;
  line-height: 1;
  font: inherit; font-weight: 700;
  color: rgba(0,0,0,.45);
  animation: cursor-blink 1050ms steps(1,end) infinite;
  transition: color .25s ease, text-shadow .25s ease;
}
.tagline .double-slash::after { animation-delay: .10s; }

.brand:hover .tagline .double-slash::before,
.brand:focus-within .tagline .double-slash::before {
  color: var(--brand-orange); text-shadow: 0 0 .35em rgba(255,78,0,.45);
}
.brand:hover .tagline .double-slash::after,
.brand:focus-within .tagline .double-slash::after {
  color: var(--brand-blue); text-shadow: 0 0 .35em rgba(0,178,255,.45);
}

/* Respect reduced motion */
@media (prefers-reduced-motion: reduce) {
  * { animation: none !important; transition: none !important; }
}

/* ========== Social row (pinned, hover swap to white) ========== */
.social {
  position: fixed; left: 0; right: 0;
  bottom: var(--social-bottom-pad);
  display: flex; justify-content: center;
  pointer-events: auto; z-index: 30;
}

.social .social-grid {
  display: flex; align-items: center; justify-content: center;
  gap: var(--social-gap);
  margin: 0; padding: 0; list-style: none;
}

/* Clickable tile with iOS-like “squircle” bg that appears on hover
   NOTE: we use flex so the icon is mathematically centered inside the pill */
.social .tile {
  position: relative;
  display: flex;                   /* <-- perfect centering */
  align-items: center;
  justify-content: center;
  width: var(--social-pill-size);
  height: var(--social-pill-size);
  border-radius: 22%;
  text-decoration: none;
  -webkit-tap-highlight-color: transparent;
  transition: background-color 200ms ease, transform 200ms ease;
  background: transparent;        /* only black icon at rest */
  overflow: hidden;               /* guard against oversized bitmaps */
}
.social .tile:hover,
.social .tile:focus-visible { transform: translateZ(0) scale(1.06); }

/* Icon wrapper ensures exact box and keeps icons centered */
.social .icon-wrap {
  position: relative;
  display: flex;                   /* <-- also centered here */
  align-items: center;
  justify-content: center;
  width: var(--social-icon-size);
  height: var(--social-icon-size);
}

/* Stack two PNGs and fade between them; 'contain' centers them visually */
.social .icon {
  position: absolute; inset: 0;
  width: 100%; height: 100%;
  object-fit: contain;
  image-rendering: -webkit-optimize-contrast;
  transition: opacity 160ms ease;
}
.social .img--default { opacity: 1; }
.social .img--hover   { opacity: 0; }

.social .tile:hover .img--default,
.social .tile:focus-visible .img--default { opacity: 0; }
.social .tile:hover .img--hover,
.social .tile:focus-visible .img--hover   { opacity: 1; }

/* Hover pill color per network */
.social .social-item.github   .tile:hover { background-color: var(--github); }
.social .social-item.medium   .tile:hover { background-color: var(--medium); }
.social .social-item.five00px .tile:hover { background-color: var(--five00px); } /* 500px */
.social .social-item.bluesky  .tile:hover { background-color: var(--bluesky); }
.social .social-item.mastodon .tile:hover { background-color: var(--mastodon); }
.social .social-item.email    .tile:hover { background-color: var(--email); }

/* Optional “NEW” capsule you place manually under an item */
.social .social-item { position: relative; }
.social .social-item .new-badge {
  position: absolute; left: 50%; top: calc(100% + 6px);
  transform: translateX(-50%);
  background: #E53935; color: #fff; font-weight: 700;
  font-size: 10px; line-height: 1;
  padding: 3px 8px; border-radius: 999px; letter-spacing: .02em;
  white-space: nowrap; box-shadow: 0 1px 2px rgba(0,0,0,.12);
  pointer-events: none;
}

/* Desktop: make icons a bit bigger */
@media (min-width: 1100px) {
  :root {
    --social-icon-size: 42px;   /* was 37 */
    --social-pill-size: 60px;   /* was 49 */
    --social-gap: 18px;
  }
  .social .social-item .new-badge {
    font-size: 12px;
    padding: 4px 10px;
    top: calc(100% + 8px);
    box-shadow: 0 2px 6px rgba(0,0,0,.16);
  }
}

/* Small-screen tweaks */
@media (max-width: 330px) {
  :root {
    --social-pill-size: 50px;
    --social-icon-size: 33px;
    --social-gap: 12px;
  }
  .social .social-item .new-badge {
    top: calc(100% + 4px);
    font-size: 9px;
    padding: 2px 6px;
  }
}

/* ======== SHIFT PORTAL (NAMESPACE) ======== */
/* Position bottom-right, similar footprint to your dot */
  #singularityPortal {
    position: fixed;
    bottom: 40px;
    right: 48px;
    width: 112px;   /* tweak to taste */
    height: 112px;
    z-index: 1000;
    cursor: pointer;
    border-radius: 50%;
    overflow: visible;   /* we let subtle glow breathe */
  }

  /* Smooth hover focus ring (very faint) */
  #singularityPortal::after {
    content: "";
    position: absolute;
    inset: -6px;
    border-radius: 50%;
    box-shadow: 0 0 0 0 rgba(82,190,255,0.18);
    transition: box-shadow .9s ease;
    pointer-events: none;
  }
  #singularityPortal:hover::after {
    box-shadow: 0 0 0 8px rgba(82,190,255,0.12);
  }

  @media (prefers-reduced-motion: reduce) {
    #singularityPortal::after { transition: none !important; }
  }
</style>

<!-- Three.js (CDN) -->
<script src="https://unpkg.com/three@0.160.0/build/three.min.js"></script>

<script>
(() => {
  const el = document.getElementById('singularityPortal');
  if (!el || !window.THREE) return;

  const prefersReduced = window.matchMedia('(prefers-reduced-motion: reduce)').matches;

  // --- Renderer / Scene / Camera ------------------------------------------------
  const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
  renderer.setPixelRatio(Math.min(window.devicePixelRatio || 1, 2));
  renderer.setSize(el.clientWidth, el.clientHeight, false);
  renderer.domElement.style.borderRadius = '50%';
  renderer.domElement.style.display = 'block';
  el.appendChild(renderer.domElement);

  const scene = new THREE.Scene();
  const camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);

  // --- Geometry: full-quad ------------------------------------------------------
  const geo = new THREE.PlaneGeometry(2, 2);

  // --- Shader material ----------------------------------------------------------
  // Interstellar-inspired lensing:
  // - Tight Schwarzschild radius r_s for the black core (completely black).
  // - Accretion brightness ring with swirl (angle sheared by time & 1/r term).
  // - Chromatic aberration by sampling RGB at slightly different radii/angles.
  // - Outer field dissolves to transparent so it blends with the page.
  const mat = new THREE.ShaderMaterial({
    transparent: true,
    uniforms: {
      u_time:     { value: 0.0 },
      u_boost:    { value: 0.0 },     // 0..1 hover energy
      u_res:      { value: new THREE.Vector2(el.clientWidth, el.clientHeight) },
      u_parallax: { value: new THREE.Vector2(0.0, 0.0) }, // tiny drift
      u_strength: { value: 1.0 },     // overall intensity
      u_blueBias: { value: 1.0 },     // lean cooler blues
    },
    vertexShader: `
      varying vec2 vUv;
      void main(){
        vUv = uv;
        gl_Position = vec4(position, 1.0);
      }
    `,
    fragmentShader: `
      precision highp float;
      varying vec2 vUv;

      uniform vec2  u_res;
      uniform vec2  u_parallax;
      uniform float u_time;
      uniform float u_boost;
      uniform float u_strength;
      uniform float u_blueBias;

      // quick hash
      float hash(float n){ return fract(sin(n)*43758.5453123); }
      // simple noise-ish function
      float n2(vec2 p){ return fract(sin(dot(p, vec2(127.1,311.7))) * 43758.5453); }

      // soft ring
      float ring(float r, float r0, float w){
        float d = abs(r - r0);
        return exp(- (d*d) / (2.0*w*w));
      }

      // palette for the accretion disk (bluish white with slight orange flares)
      vec3 accretionColor(float t){
        // cool base
        vec3 c1 = vec3(0.75, 0.86, 1.0);
        vec3 c2 = vec3(0.95, 0.98, 1.0);
        // occasional warmer micro-flare
        float flare = smoothstep(0.85, 1.0, sin(t)*0.5 + 0.5);
        vec3 warm = vec3(1.0, 0.55, 0.25) * 0.35;
        return mix(c1, c2, 0.6) + warm * flare * 0.25;
      }

      void main(){
        // Normalize to centered space with aspect correction & parallax drift
        vec2 uv = vUv;
        vec2 aspect = vec2(u_res.x / max(u_res.y,1.0), u_res.y / max(u_res.x,1.0));
        vec2 p = (uv - 0.5) * vec2(aspect.x, 1.0);
        p += u_parallax * 0.01; // tiny drift

        // Polar coords
        float r = length(p);
        float a = atan(p.y, p.x);

        // Parameters
        float rs = 0.28;                      // Schwarzschild radius (black core)
        float diskR = rs + 0.09;              // accretion ring median radius
        float diskW = 0.08 + u_boost*0.02;    // ring width grows a hair on hover

        // Swirl: shear the angle using time and an inverse radial term
        float swirl = u_time*0.35 + 0.22/(r+0.001);
        float band = ring(r, diskR, diskW);

        // Add noisy striations so it looks like flowing plasma
        float lanes = 0.6 + 0.4 * sin(14.0*a + swirl*4.0);
        float streaks = 0.5 + 0.5 * sin( (a*36.0) + u_time*2.0 + n2(p*24.0)*3.14159 );
        float disk = band * lanes * (0.7 + 0.3*streaks);

        // Chromatic aberration: sample disk at offset radii for RGB
        float ca = mix(0.003, 0.008, u_boost);
        float rR = r + ca*0.6;
        float rG = r;
        float rB = r - ca*0.6;

        float diskRch = ring(rR, diskR, diskW) * lanes;
        float diskGch = ring(rG, diskR, diskW) * lanes;
        float diskBch = ring(rB, diskR, diskW) * lanes;

        vec3 colDisk = accretionColor(u_time + a*0.5);
        // bias cooler
        colDisk = mix(colDisk, vec3(0.78,0.88,1.0), clamp(u_blueBias,0.0,1.0));

        vec3 col =
          vec3(diskRch, 0.0, 0.0) +
          vec3(0.0, diskGch, 0.0) +
          vec3(0.0, 0.0, diskBch);

        col *= colDisk;

        // Thin lensing ring close to the event horizon
        float horizon = ring(r, rs+0.02, 0.015) * 0.85;
        vec3 horizonCol = mix(vec3(0.9,0.95,1.0), vec3(0.6,0.8,1.0), 0.35);
        col += horizonCol * horizon;

        // Outer dissolve into page
        float falloff = smoothstep(0.55, 0.40, r); // fade out after ~0.4..0.55
        col *= falloff;

        // Black core: hard cut inside rs
        if (r < rs) {
          gl_FragColor = vec4(0.0,0.0,0.0,1.0);
          return;
        }

        // Final boost & alpha
        float alpha = clamp(falloff, 0.0, 1.0);
        col *= (0.85 + 0.35*u_boost) * u_strength;

        gl_FragColor = vec4(col, alpha);
      }
    `
  });

  const mesh = new THREE.Mesh(geo, mat);
  scene.add(mesh);

  // --- Hover easing -------------------------------------------------------------
  let boost = 0;          // 0..1
  let parallax = {x:0, y:0};
  let t0 = performance.now();

  function easeTowards(current, target, rate){
    return current + (target - current) * rate;
  }

  // hover in/out
  let isHover = false;
  el.addEventListener('mouseenter', () => { isHover = true; });
  el.addEventListener('mouseleave', () => { isHover = false; });

  // tiny parallax drift loop (slow oscillation)
  function updateParallax(time){
    // stronger when boosted
    const amp = isHover ? 0.7 : 0.35;
    parallax.x = Math.sin(time*0.0007) * amp;
    parallax.y = Math.cos(time*0.0009) * amp;
  }

  // maintain proper resolution uniform (also on resize)
  function setSize(){
    const w = el.clientWidth;
    const h = el.clientHeight;
    renderer.setSize(w, h, false);
    mat.uniforms.u_res.value.set(w, h);
  }
  const ro = new ResizeObserver(setSize);
  ro.observe(el);

  // --- Animation loop -----------------------------------------------------------
  function raf(now){
    const dt = now - t0; t0 = now;

    // time
    mat.uniforms.u_time.value = now * (prefersReduced ? 0.0002 : 0.001);

    // hover easing (smooth in/out)
    const targetBoost = isHover ? 1.0 : 0.0;
    boost = easeTowards(boost, targetBoost, prefersReduced ? 0.1 : 0.07);
    mat.uniforms.u_boost.value = boost;

    // parallax drift
    updateParallax(now);
    // soften parallax at rest
    const px = parallax.x * (0.15 + 0.85*boost);
    const py = parallax.y * (0.15 + 0.85*boost);
    mat.uniforms.u_parallax.value.set(px, py);

    renderer.render(scene, camera);
    requestAnimationFrame(raf);
  }
  requestAnimationFrame(raf);

  // Safety: fade-out navigation if you want click-through
  el.addEventListener('click', (e) => {
    // Example: navigate to /shift.html (uncomment if desired)
    // e.preventDefault();
    // document.body.style.transition = 'opacity 0.6s ease';
    // document.body.style.opacity = '0';
    // setTimeout(() => window.location = '/shift.html', 600);
  });

})();
</script>
<!-- === /INTERSTELLAR SINGULARITY PORTAL ===================================== -->


